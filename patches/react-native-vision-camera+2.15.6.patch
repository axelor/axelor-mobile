diff --git a/node_modules/react-native-vision-camera/ios/CameraView+AVCaptureSession.swift b/node_modules/react-native-vision-camera/ios/CameraView+AVCaptureSession.swift
index 5c9b77d..d127aab 100644
--- a/node_modules/react-native-vision-camera/ios/CameraView+AVCaptureSession.swift
+++ b/node_modules/react-native-vision-camera/ios/CameraView+AVCaptureSession.swift
@@ -195,14 +195,6 @@ extension CameraView {
           device.automaticallyEnablesLowLightBoostWhenAvailable = lowLightBoost!.boolValue
         }
       }
-      if let colorSpace = colorSpace as String? {
-        guard let avColorSpace = try? AVCaptureColorSpace(string: colorSpace),
-              device.activeFormat.supportedColorSpaces.contains(avColorSpace) else {
-          invokeOnError(.format(.invalidColorSpace(colorSpace: colorSpace)))
-          return
-        }
-        device.activeColorSpace = avColorSpace
-      }
 
       device.unlockForConfiguration()
       ReactLogger.log(level: .info, message: "Device successfully configured!")
diff --git a/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+matchesFilter.swift b/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+matchesFilter.swift
index 35789a6..c33ed31 100644
--- a/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+matchesFilter.swift
+++ b/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+matchesFilter.swift
@@ -54,13 +54,6 @@ extension AVCaptureDevice.Format {
         return false
       }
     }
-    if let colorSpaces = filter.value(forKey: "colorSpaces") as? [String] {
-      let avColorSpaces = colorSpaces.map { try? AVCaptureColorSpace(string: $0) }
-      let allColorSpacesIncluded = supportedColorSpaces.allSatisfy { avColorSpaces.contains($0) }
-      if !allColorSpacesIncluded {
-        return false
-      }
-    }
     if let frameRateRanges = filter.value(forKey: "frameRateRanges") as? [NSDictionary] {
       let allFrameRateRangesIncluded = videoSupportedFrameRateRanges.allSatisfy { range -> Bool in
         frameRateRanges.contains { dict -> Bool in
diff --git a/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+toDictionary.swift b/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+toDictionary.swift
index fec83ca..d8a3a55 100644
--- a/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+toDictionary.swift
+++ b/node_modules/react-native-vision-camera/ios/Extensions/AVCaptureDevice.Format+toDictionary.swift
@@ -33,7 +33,6 @@ extension AVCaptureDevice.Format {
       "minISO": minISO,
       "fieldOfView": videoFieldOfView,
       "maxZoom": videoMaxZoomFactor,
-      "colorSpaces": supportedColorSpaces.map(\.descriptor),
       "supportsVideoHDR": isVideoHDRSupported,
       "supportsPhotoHDR": false,
       "frameRateRanges": videoSupportedFrameRateRanges.map {
diff --git a/node_modules/react-native-vision-camera/ios/Parsers/AVCaptureColorSpace+descriptor.swift b/node_modules/react-native-vision-camera/ios/Parsers/AVCaptureColorSpace+descriptor.swift
deleted file mode 100644
index 13a403b..0000000
--- a/node_modules/react-native-vision-camera/ios/Parsers/AVCaptureColorSpace+descriptor.swift
+++ /dev/null
@@ -1,44 +0,0 @@
-//
-//  AVCaptureColorSpace+descriptor.swift
-//  mrousavy
-//
-//  Created by Marc Rousavy on 19.12.20.
-//  Copyright Â© 2020 mrousavy. All rights reserved.
-//
-
-import AVFoundation
-
-extension AVCaptureColorSpace {
-  init(string: String) throws {
-    switch string {
-    case "hlg-bt2020":
-      if #available(iOS 14.1, *) {
-        self = .HLG_BT2020
-      } else {
-        throw EnumParserError.unsupportedOS(supportedOnOS: "14.1")
-      }
-      return
-    case "p3-d65":
-      self = .P3_D65
-      return
-    case "srgb":
-      self = .sRGB
-      return
-    default:
-      throw EnumParserError.invalidValue
-    }
-  }
-
-  var descriptor: String {
-    switch self {
-    case .HLG_BT2020:
-      return "hlg-bt2020"
-    case .P3_D65:
-      return "p3-d65"
-    case .sRGB:
-      return "srgb"
-    default:
-      fatalError("AVCaptureDevice.Position has unknown state.")
-    }
-  }
-}
