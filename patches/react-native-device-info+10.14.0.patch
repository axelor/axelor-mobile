diff --git a/node_modules/react-native-device-info/android/src/main/java/com/learnium/RNDeviceInfo/RNDeviceModule.java b/node_modules/react-native-device-info/android/src/main/java/com/learnium/RNDeviceInfo/RNDeviceModule.java
index fc021f5..76b5ab7 100644
--- a/node_modules/react-native-device-info/android/src/main/java/com/learnium/RNDeviceInfo/RNDeviceModule.java
+++ b/node_modules/react-native-device-info/android/src/main/java/com/learnium/RNDeviceInfo/RNDeviceModule.java
@@ -135,7 +135,12 @@ public class RNDeviceModule extends ReactContextBaseJavaModule {
       }
     };
 
-    getReactApplicationContext().registerReceiver(receiver, filter);
+    if (Build.VERSION.SDK_INT >= 34 && getReactApplicationContext().getApplicationInfo().targetSdkVersion >= 34) {
+      getReactApplicationContext().registerReceiver(receiver, filter, Context.RECEIVER_EXPORTED);
+    } else {
+      getReactApplicationContext().registerReceiver(receiver, filter);
+    }
+
     initializeHeadphoneConnectionReceivers();
   }
 
@@ -153,7 +158,11 @@ public class RNDeviceModule extends ReactContextBaseJavaModule {
       }
     };
 
-    getReactApplicationContext().registerReceiver(headphoneConnectionReceiver, filter);
+    if (Build.VERSION.SDK_INT >= 34 && getReactApplicationContext().getApplicationInfo().targetSdkVersion >= 34) {
+      getReactApplicationContext().registerReceiver(headphoneConnectionReceiver, filter, Context.RECEIVER_EXPORTED);
+    } else {
+      getReactApplicationContext().registerReceiver(headphoneConnectionReceiver, filter);
+    }
 
     // 2. Filter for wired headset
     IntentFilter filterWired = new IntentFilter();
@@ -167,7 +176,11 @@ public class RNDeviceModule extends ReactContextBaseJavaModule {
       }
     };
 
-    getReactApplicationContext().registerReceiver(headphoneWiredConnectionReceiver, filterWired);
+    if (Build.VERSION.SDK_INT >= 34 && getReactApplicationContext().getApplicationInfo().targetSdkVersion >= 34) {
+      getReactApplicationContext().registerReceiver(headphoneWiredConnectionReceiver, filterWired, Context.RECEIVER_EXPORTED);
+    } else {
+      getReactApplicationContext().registerReceiver(headphoneWiredConnectionReceiver, filterWired);
+    }
 
     // 3. Filter for bluetooth headphones
     IntentFilter filterBluetooth = new IntentFilter();
@@ -181,7 +194,11 @@ public class RNDeviceModule extends ReactContextBaseJavaModule {
       }
     };
 
-    getReactApplicationContext().registerReceiver(headphoneBluetoothConnectionReceiver, filterBluetooth);
+    if (Build.VERSION.SDK_INT >= 34 && getReactApplicationContext().getApplicationInfo().targetSdkVersion >= 34) {
+      getReactApplicationContext().registerReceiver(headphoneBluetoothConnectionReceiver, filterBluetooth, Context.RECEIVER_EXPORTED);
+    } else {
+      getReactApplicationContext().registerReceiver(headphoneBluetoothConnectionReceiver, filterBluetooth);
+    }
   }
 
   @Override
@@ -504,7 +521,13 @@ public class RNDeviceModule extends ReactContextBaseJavaModule {
   @ReactMethod(isBlockingSynchronousMethod = true)
   public boolean isBatteryChargingSync(){
     IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
-    Intent batteryStatus = getReactApplicationContext().registerReceiver(null, ifilter);
+    Intent batteryStatus;
+    if (Build.VERSION.SDK_INT >= 34 && getReactApplicationContext().getApplicationInfo().targetSdkVersion >= 34) {
+      batteryStatus = getReactApplicationContext().registerReceiver(null, ifilter, Context.RECEIVER_EXPORTED);
+    } else {
+      batteryStatus = getReactApplicationContext().registerReceiver(null, ifilter);
+    }
+
     int status = 0;
     if (batteryStatus != null) {
       status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1);
@@ -540,7 +563,13 @@ public class RNDeviceModule extends ReactContextBaseJavaModule {
 
   @ReactMethod(isBlockingSynchronousMethod = true)
   public WritableMap getPowerStateSync() {
-    Intent intent = getReactApplicationContext().registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
+    Intent intent;
+    if (Build.VERSION.SDK_INT >= 34 && getReactApplicationContext().getApplicationInfo().targetSdkVersion >= 34) {
+      intent = getReactApplicationContext().registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED), Context.RECEIVER_EXPORTED);
+    } else {
+      intent = getReactApplicationContext().registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
+    }
+
     return getPowerStateFromIntent(intent);
   }
 
@@ -549,7 +578,13 @@ public class RNDeviceModule extends ReactContextBaseJavaModule {
 
   @ReactMethod(isBlockingSynchronousMethod = true)
   public double getBatteryLevelSync() {
-    Intent intent = getReactApplicationContext().registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
+    Intent intent;
+    if (Build.VERSION.SDK_INT >= 34 && getReactApplicationContext().getApplicationInfo().targetSdkVersion >= 34) {
+      intent = getReactApplicationContext().registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED), Context.RECEIVER_EXPORTED);
+    } else {
+      intent = getReactApplicationContext().registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
+    }
+
     WritableMap powerState = getPowerStateFromIntent(intent);
 
     if(powerState == null) {
